<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=9">
<meta name="generator" content="Doxygen 1.8.7">
<title>c++ ex. 3: Matrix&lt; T &gt; Class Template Reference</title>
<link href="c++%20ex.%203%20%20Matrix%28%20T%20%29%20Class%20Template%20Reference_files/tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="c++%20ex.%203%20%20Matrix%28%20T%20%29%20Class%20Template%20Reference_files/jquery.js"></script>
<script type="text/javascript" src="c++%20ex.%203%20%20Matrix%28%20T%20%29%20Class%20Template%20Reference_files/dynsections.js"></script>
<link href="c++%20ex.%203%20%20Matrix%28%20T%20%29%20Class%20Template%20Reference_files/search.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="c++%20ex.%203%20%20Matrix%28%20T%20%29%20Class%20Template%20Reference_files/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="c++%20ex.%203%20%20Matrix%28%20T%20%29%20Class%20Template%20Reference_files/doxygen.css" rel="stylesheet" type="text/css">
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellpadding="0" cellspacing="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">c++ ex. 3
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.7 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/index.html"><span>Main&nbsp;Page</span></a></li>
      <li class="current"><a href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/annotated.html"><span>Classes</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="c++%20ex.%203%20%20Matrix%28%20T%20%29%20Class%20Template%20Reference_files/mag_sel.png" onmouseover="return searchBox.OnSearchSelectShow()" onmouseout="return searchBox.OnSearchSelectHide()" alt="">
          <input id="MSearchField" value="Search" accesskey="S" onfocus="searchBox.OnSearchFieldFocus(true)" onblur="searchBox.OnSearchFieldFocus(false)" onkeyup="searchBox.OnSearchFieldChange(event)" type="text">
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" src="c++%20ex.%203%20%20Matrix%28%20T%20%29%20Class%20Template%20Reference_files/close.png" alt="" border="0"></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/annotated.html"><span>Class&nbsp;List</span></a></li>
      <li><a href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classes.html"><span>Class&nbsp;Index</span></a></li>
      <li><a href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/functions.html"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow" onmouseover="return searchBox.OnSearchSelectShow()" onmouseout="return searchBox.OnSearchSelectHide()" onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">â€¢</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&nbsp;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&nbsp;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&nbsp;</span>Friends</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" name="MSearchResults" id="MSearchResults" frameborder="0">
</iframe>
</div>

</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> |
<a href="#friends">Friends</a> |
<a href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix-members.html">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Matrix&lt; T &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>The <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html" title="The Matrix class this class holds a matrix. ">Matrix</a> class this class holds a matrix.  
 <a href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#details">More...</a></p>

<p><code>#include &lt;matrix.h&gt;</code></p>
<table class="memberdecls">
<tbody><tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a9d567e3a121b1be0c3f9c461cab524fe"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a9d567e3a121b1be0c3f9c461cab524fe"></a>
&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#a9d567e3a121b1be0c3f9c461cab524fe">Matrix</a> ()</td></tr>
<tr class="memdesc:a9d567e3a121b1be0c3f9c461cab524fe"><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html" title="The Matrix class this class holds a matrix. ">Matrix</a> default constructor, constructs 1X1 <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html" title="The Matrix class this class holds a matrix. ">Matrix</a> with the default value for type T (the value assigned by default constructor of type T) <br></td></tr>
<tr class="separator:a9d567e3a121b1be0c3f9c461cab524fe"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem:a52399713fa91297f8fb17d48ddb83b69"><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#a52399713fa91297f8fb17d48ddb83b69">Matrix</a> (unsigned int rows, unsigned int cols, const vector&lt; T &gt; &amp;cells)</td></tr>
<tr class="memdesc:a52399713fa91297f8fb17d48ddb83b69"><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html" title="The Matrix class this class holds a matrix. ">Matrix</a> construct a matrix by size rowsXcols using values from cells.  <a href="#a52399713fa91297f8fb17d48ddb83b69">More...</a><br></td></tr>
<tr class="separator:a52399713fa91297f8fb17d48ddb83b69"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem:a1012080b9cf91044d58c11f5a49c8230"><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#a1012080b9cf91044d58c11f5a49c8230">Matrix</a> (const <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt; &amp;other)</td></tr>
<tr class="memdesc:a1012080b9cf91044d58c11f5a49c8230"><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html" title="The Matrix class this class holds a matrix. ">Matrix</a> copy constructor for <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html" title="The Matrix class this class holds a matrix. ">Matrix</a> class performs deep copy of the matrix.  <a href="#a1012080b9cf91044d58c11f5a49c8230">More...</a><br></td></tr>
<tr class="separator:a1012080b9cf91044d58c11f5a49c8230"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem:a130b461775f39cc81eb2f9834f702558"><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#a130b461775f39cc81eb2f9834f702558">Matrix</a> (<a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt; &amp;&amp;other)</td></tr>
<tr class="memdesc:a130b461775f39cc81eb2f9834f702558"><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html" title="The Matrix class this class holds a matrix. ">Matrix</a> move constructor for <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html" title="The Matrix class this class holds a matrix. ">Matrix</a> class copy the matrix.  <a href="#a130b461775f39cc81eb2f9834f702558">More...</a><br></td></tr>
<tr class="separator:a130b461775f39cc81eb2f9834f702558"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem:aa362491926118a61584490beff4dcf13"><td class="memItemLeft" align="right" valign="top">T&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#aa362491926118a61584490beff4dcf13">trace</a> () const </td></tr>
<tr class="memdesc:aa362491926118a61584490beff4dcf13"><td class="mdescLeft">&nbsp;</td><td class="mdescRight">trace
 calc the trace of the matrix the trace of a matrix is the sum of it's 
main diagonal, the diagonal from the upper left to the lower right. if 
can't calc trace (e,g: not square matrix) throws an exeption.  <a href="#aa362491926118a61584490beff4dcf13">More...</a><br></td></tr>
<tr class="separator:aa362491926118a61584490beff4dcf13"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem:a744af9b5b1edc342fe569d9fa87d14a8"><td class="memItemLeft" align="right" valign="top">T&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#a744af9b5b1edc342fe569d9fa87d14a8">det</a> () const </td></tr>
<tr class="memdesc:a744af9b5b1edc342fe569d9fa87d14a8"><td class="mdescLeft">&nbsp;</td><td class="mdescRight">det calc the determinant of the matrix if can't calc the determinante (e,g: not square matrix) throws an exeption.  <a href="#a744af9b5b1edc342fe569d9fa87d14a8">More...</a><br></td></tr>
<tr class="separator:a744af9b5b1edc342fe569d9fa87d14a8"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem:a678c8d016f3c2b3eb01e6f383c69d84f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#a678c8d016f3c2b3eb01e6f383c69d84f">transpose</a> () const </td></tr>
<tr class="memdesc:a678c8d016f3c2b3eb01e6f383c69d84f"><td class="mdescLeft">&nbsp;</td><td class="mdescRight">transpose returns the transpose of the matrix.  <a href="#a678c8d016f3c2b3eb01e6f383c69d84f">More...</a><br></td></tr>
<tr class="separator:a678c8d016f3c2b3eb01e6f383c69d84f"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem:a50a42b8e1b50227d324ac4429fd56166"><td class="memItemLeft" align="right" valign="top"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#a50a42b8e1b50227d324ac4429fd56166">operator-</a> (const <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a> &amp;other) const </td></tr>
<tr class="memdesc:a50a42b8e1b50227d324ac4429fd56166"><td class="mdescLeft">&nbsp;</td><td class="mdescRight">operator - returns val by val differnce of matrixes  <a href="#a50a42b8e1b50227d324ac4429fd56166">More...</a><br></td></tr>
<tr class="separator:a50a42b8e1b50227d324ac4429fd56166"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem:aeb50807cd0f6ef2a80a532ed8a6dbbdc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#aeb50807cd0f6ef2a80a532ed8a6dbbdc">operator-=</a> (const <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a> &amp;other)</td></tr>
<tr class="memdesc:aeb50807cd0f6ef2a80a532ed8a6dbbdc"><td class="mdescLeft">&nbsp;</td><td class="mdescRight">operator -= val by val differnce of matrixes  <a href="#aeb50807cd0f6ef2a80a532ed8a6dbbdc">More...</a><br></td></tr>
<tr class="separator:aeb50807cd0f6ef2a80a532ed8a6dbbdc"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem:a6f304efd2bdc90c8703a530e78925e76"><td class="memItemLeft" align="right" valign="top"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#a6f304efd2bdc90c8703a530e78925e76">operator+</a> (const <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a> &amp;other) const </td></tr>
<tr class="memdesc:a6f304efd2bdc90c8703a530e78925e76"><td class="mdescLeft">&nbsp;</td><td class="mdescRight">operator + returns val by val addition of matrixes  <a href="#a6f304efd2bdc90c8703a530e78925e76">More...</a><br></td></tr>
<tr class="separator:a6f304efd2bdc90c8703a530e78925e76"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem:a7fef945bd494e4d6f03b0571112c54fa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#a7fef945bd494e4d6f03b0571112c54fa">operator+=</a> (const <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a> &amp;other)</td></tr>
<tr class="memdesc:a7fef945bd494e4d6f03b0571112c54fa"><td class="mdescLeft">&nbsp;</td><td class="mdescRight">operator += val by val addition of matrixes  <a href="#a7fef945bd494e4d6f03b0571112c54fa">More...</a><br></td></tr>
<tr class="separator:a7fef945bd494e4d6f03b0571112c54fa"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem:a1f93236703bb9d047aff5d13a925b0ee"><td class="memItemLeft" align="right" valign="top"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#a1f93236703bb9d047aff5d13a925b0ee">operator*</a> (const <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a> &amp;other) const </td></tr>
<tr class="memdesc:a1f93236703bb9d047aff5d13a925b0ee"><td class="mdescLeft">&nbsp;</td><td class="mdescRight">operator
 * returns dot product of matrixes each cell in the resulting matrix is 
the sum of multiplies any cell in the equivalent column in the cell of 
the equivalent row. (e,g: c = a * b =&gt; c_{i, j} = sum(a_{i, k} * 
b_{k, j}) for more information, see <a href="http://www.mathsisfun.com/algebra/matrix-multiplying.html">here </a>
 for more detailed explanation. if the matrixes can't be multiply (e,g: 
the number of columns in the left matrix is different than the number of
 rows in the right one) throws an exception.  <a href="#a1f93236703bb9d047aff5d13a925b0ee">More...</a><br></td></tr>
<tr class="separator:a1f93236703bb9d047aff5d13a925b0ee"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem:adff859b91b301d836a31d5dd80cd9f2b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#adff859b91b301d836a31d5dd80cd9f2b">operator=</a> (<a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a> &amp;other)</td></tr>
<tr class="memdesc:adff859b91b301d836a31d5dd80cd9f2b"><td class="mdescLeft">&nbsp;</td><td class="mdescRight">operator = do a deep copy of another matrix into this one  <a href="#adff859b91b301d836a31d5dd80cd9f2b">More...</a><br></td></tr>
<tr class="separator:adff859b91b301d836a31d5dd80cd9f2b"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem:aae0690c40b2ed1e3d84abee7080a61dd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#aae0690c40b2ed1e3d84abee7080a61dd">operator*=</a> (const <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a> &amp;other)</td></tr>
<tr class="memdesc:aae0690c40b2ed1e3d84abee7080a61dd"><td class="mdescLeft">&nbsp;</td><td class="mdescRight">operator *= dot product of matrixes  <a href="#aae0690c40b2ed1e3d84abee7080a61dd">More...</a><br></td></tr>
<tr class="separator:aae0690c40b2ed1e3d84abee7080a61dd"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem:affeca995038783bc2f712287cc06ddbd"><td class="memItemLeft" align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#affeca995038783bc2f712287cc06ddbd">operator!=</a> (const <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a> &amp;other) const </td></tr>
<tr class="memdesc:affeca995038783bc2f712287cc06ddbd"><td class="mdescLeft">&nbsp;</td><td class="mdescRight">operator != returns true iff two matrixes are different  <a href="#affeca995038783bc2f712287cc06ddbd">More...</a><br></td></tr>
<tr class="separator:affeca995038783bc2f712287cc06ddbd"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem:a3037a7d875b2bc98b63ddf590ccae990"><td class="memItemLeft" align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#a3037a7d875b2bc98b63ddf590ccae990">operator==</a> (const <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a> &amp;other) const </td></tr>
<tr class="memdesc:a3037a7d875b2bc98b63ddf590ccae990"><td class="mdescLeft">&nbsp;</td><td class="mdescRight">operator == returns true iff both matrixes are equal  <a href="#a3037a7d875b2bc98b63ddf590ccae990">More...</a><br></td></tr>
<tr class="separator:a3037a7d875b2bc98b63ddf590ccae990"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem:afe7af98b93477a46a6522c51bd6a7b6b"><td class="memItemLeft" align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#afe7af98b93477a46a6522c51bd6a7b6b">getNumOfRows</a> () const </td></tr>
<tr class="memdesc:afe7af98b93477a46a6522c51bd6a7b6b"><td class="mdescLeft">&nbsp;</td><td class="mdescRight">getNumOfRows get the number of rows in this matrix  <a href="#afe7af98b93477a46a6522c51bd6a7b6b">More...</a><br></td></tr>
<tr class="separator:afe7af98b93477a46a6522c51bd6a7b6b"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem:acc433c474187bbca8f718dc77929c751"><td class="memItemLeft" align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#acc433c474187bbca8f718dc77929c751">getNumOfCols</a> () const </td></tr>
<tr class="memdesc:acc433c474187bbca8f718dc77929c751"><td class="mdescLeft">&nbsp;</td><td class="mdescRight">getNumOfCols get the number of columns in this matrix  <a href="#acc433c474187bbca8f718dc77929c751">More...</a><br></td></tr>
<tr class="separator:acc433c474187bbca8f718dc77929c751"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem:a75e49f6179992a5f8da53a00f6f22f9c"><td class="memItemLeft" align="right" valign="top">T&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#a75e49f6179992a5f8da53a00f6f22f9c">operator()</a> (int row, int col) const </td></tr>
<tr class="memdesc:a75e49f6179992a5f8da53a00f6f22f9c"><td class="mdescLeft">&nbsp;</td><td class="mdescRight">operator () returns the value in the [row, col] cell of the matrix  <a href="#a75e49f6179992a5f8da53a00f6f22f9c">More...</a><br></td></tr>
<tr class="separator:a75e49f6179992a5f8da53a00f6f22f9c"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem:a774518be474088dcbc79b18918d62bc8"><td class="memItemLeft" align="right" valign="top">T &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#a774518be474088dcbc79b18918d62bc8">operator()</a> (int row, int col)</td></tr>
<tr class="memdesc:a774518be474088dcbc79b18918d62bc8"><td class="mdescLeft">&nbsp;</td><td class="mdescRight">operator () returns a reference to the value in the [row, col] cell of the matrix  <a href="#a774518be474088dcbc79b18918d62bc8">More...</a><br></td></tr>
<tr class="separator:a774518be474088dcbc79b18918d62bc8"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem:ac52175b165a1e4b18317e67bd82aad12"><td class="memItemLeft" align="right" valign="top"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#ac52175b165a1e4b18317e67bd82aad12">map</a> (T(*func)(const T)) const </td></tr>
<tr class="memdesc:ac52175b165a1e4b18317e67bd82aad12"><td class="mdescLeft">&nbsp;</td><td class="mdescRight">map run function on every item of the matrix. returns a mtrix of item item result.  <a href="#ac52175b165a1e4b18317e67bd82aad12">More...</a><br></td></tr>
<tr class="separator:ac52175b165a1e4b18317e67bd82aad12"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem:a9161c945ab0f3ea084683269b437badd"><td class="memItemLeft" align="right" valign="top">iterator&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#a9161c945ab0f3ea084683269b437badd">begin</a> ()</td></tr>
<tr class="memdesc:a9161c945ab0f3ea084683269b437badd"><td class="mdescLeft">&nbsp;</td><td class="mdescRight">begin
 return an iterator over all the matrix cells, start from the first row 
(e,g: matrix(0, 0), matrix(0, 1) .. matrix(0, col - 1), matrix(1, 0) 
...) this iterator support the copy, assignment, increment, 
equality/inequality and dereferencing operators.  <a href="#a9161c945ab0f3ea084683269b437badd">More...</a><br></td></tr>
<tr class="separator:a9161c945ab0f3ea084683269b437badd"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem:a78a70e06274ca998db6fe02923f98a3b"><td class="memItemLeft" align="right" valign="top">iterator&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#a78a70e06274ca998db6fe02923f98a3b">end</a> ()</td></tr>
<tr class="memdesc:a78a70e06274ca998db6fe02923f98a3b"><td class="mdescLeft">&nbsp;</td><td class="mdescRight">end returns an iterator pointing to the past-the-end cell in the matrix  <a href="#a78a70e06274ca998db6fe02923f98a3b">More...</a><br></td></tr>
<tr class="separator:a78a70e06274ca998db6fe02923f98a3b"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem:a13774dc507f82f1f66bb59b3b19e867f"><td class="memItemLeft" align="right" valign="top">const_iterator&lt; vector&lt; T &gt; &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#a13774dc507f82f1f66bb59b3b19e867f">rowIteratorBegin</a> () const </td></tr>
<tr class="memdesc:a13774dc507f82f1f66bb59b3b19e867f"><td class="mdescLeft">&nbsp;</td><td class="mdescRight">end returns an iterator pointing to the past-the-end cell in the matrix  <a href="#a13774dc507f82f1f66bb59b3b19e867f">More...</a><br></td></tr>
<tr class="separator:a13774dc507f82f1f66bb59b3b19e867f"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem:a378d43faa1671f8736c00175217c89bf"><td class="memItemLeft" align="right" valign="top">const_iterator&lt; vector&lt; T &gt; &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#a378d43faa1671f8736c00175217c89bf">rowIteratorEnd</a> () const </td></tr>
<tr class="memdesc:a378d43faa1671f8736c00175217c89bf"><td class="mdescLeft">&nbsp;</td><td class="mdescRight">rowIteratorEnd returns an iterator pointing to the past-the-end row in the matrix  <a href="#a378d43faa1671f8736c00175217c89bf">More...</a><br></td></tr>
<tr class="separator:a378d43faa1671f8736c00175217c89bf"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem:a743630b6170037d892aec448f4f36114"><td class="memItemLeft" align="right" valign="top">const_iterator&lt; vector&lt; T &gt; &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#a743630b6170037d892aec448f4f36114">colIteratorEnd</a> () const </td></tr>
<tr class="memdesc:a743630b6170037d892aec448f4f36114"><td class="mdescLeft">&nbsp;</td><td class="mdescRight">colIteratorEnd returns an iterator pointing to the past-the-end col in the matrix  <a href="#a743630b6170037d892aec448f4f36114">More...</a><br></td></tr>
<tr class="separator:a743630b6170037d892aec448f4f36114"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem:a4e3f1efb2eb450996fb7c7ed2a758ad9"><td class="memItemLeft" align="right" valign="top">const_iterator&lt; vector&lt; T &gt; &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#a4e3f1efb2eb450996fb7c7ed2a758ad9">colIteratorBegin</a> () const </td></tr>
<tr class="memdesc:a4e3f1efb2eb450996fb7c7ed2a758ad9"><td class="mdescLeft">&nbsp;</td><td class="mdescRight">colIteratorBegin return an iterator over all the matrix cols  <a href="#a4e3f1efb2eb450996fb7c7ed2a758ad9">More...</a><br></td></tr>
<tr class="separator:a4e3f1efb2eb450996fb7c7ed2a758ad9"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
</tbody></table><table class="memberdecls">
<tbody><tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:ae6a2969ab041cf8350335f575f7e0b75"><td class="memItemLeft" align="right" valign="top">ostream &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#ae6a2969ab041cf8350335f575f7e0b75">operator&lt;&lt;</a> (ostream &amp;out, const <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt; &amp;matrix)</td></tr>
<tr class="memdesc:ae6a2969ab041cf8350335f575f7e0b75"><td class="mdescLeft">&nbsp;</td><td class="mdescRight">operator
 &lt;&lt; print a matrix assume that type T has &lt;&lt; operator by 
itself. print each cell in the matrix, with a tab ('\t') between cells, 
and new line between columns (and at the end of the matrix) except for 
Matrix&lt;char&gt;, than this operator prints no spaces between cells, 
and a single space between columns.  <a href="#ae6a2969ab041cf8350335f575f7e0b75">More...</a><br></td></tr>
<tr class="separator:ae6a2969ab041cf8350335f575f7e0b75"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem:a83280b78a1638e1b0ceefab404efd254"><td class="memItemLeft" align="right" valign="top"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html#a83280b78a1638e1b0ceefab404efd254">operator-</a> (const <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt; &amp;self)</td></tr>
<tr class="memdesc:a83280b78a1638e1b0ceefab404efd254"><td class="mdescLeft">&nbsp;</td><td class="mdescRight">operator - returns val by val negatives of a matrix  <a href="#a83280b78a1638e1b0ceefab404efd254">More...</a><br></td></tr>
<tr class="separator:a83280b78a1638e1b0ceefab404efd254"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
</tbody></table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename T&gt;<br>
class Matrix&lt; T &gt;</h3>

<p>The <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html" title="The Matrix class this class holds a matrix. ">Matrix</a> class this class holds a matrix. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a52399713fa91297f8fb17d48ddb83b69"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tbody><tr>
  <td class="mlabels-left">
      <table class="memname">
        <tbody><tr>
          <td class="memname"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt;::<a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"><em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"><em>cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector&lt; T &gt; &amp;&nbsp;</td>
          <td class="paramname"><em>cells</em>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </tbody></table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</tbody></table>
</div><div class="memdoc">

<p><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html" title="The Matrix class this class holds a matrix. ">Matrix</a> construct a matrix by size rowsXcols using values from cells. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname">rows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">cols</td><td>number of columns in the matrix </td></tr>
    <tr><td class="paramname">cells</td><td>a vector containing the values of the cells in the matrix </td></tr>
  </tbody></table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a1012080b9cf91044d58c11f5a49c8230"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tbody><tr>
  <td class="mlabels-left">
      <table class="memname">
        <tbody><tr>
          <td class="memname"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt;::<a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</tbody></table>
</div><div class="memdoc">

<p><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html" title="The Matrix class this class holds a matrix. ">Matrix</a> copy constructor for <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html" title="The Matrix class this class holds a matrix. ">Matrix</a> class performs deep copy of the matrix. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname">other</td><td>the <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html" title="The Matrix class this class holds a matrix. ">Matrix</a> to copy </td></tr>
  </tbody></table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a130b461775f39cc81eb2f9834f702558"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tbody><tr>
  <td class="mlabels-left">
      <table class="memname">
        <tbody><tr>
          <td class="memname"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt;::<a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt; &amp;&amp;&nbsp;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</tbody></table>
</div><div class="memdoc">

<p><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html" title="The Matrix class this class holds a matrix. ">Matrix</a> move constructor for <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html" title="The Matrix class this class holds a matrix. ">Matrix</a> class copy the matrix. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname">other</td><td>the <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html" title="The Matrix class this class holds a matrix. ">Matrix</a> to copy </td></tr>
  </tbody></table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a9161c945ab0f3ea084683269b437badd"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tbody><tr>
  <td class="mlabels-left">
      <table class="memname">
        <tbody><tr>
          <td class="memname">iterator <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</tbody></table>
</div><div class="memdoc">

<p>begin return an iterator over all the matrix cells, start from the 
first row (e,g: matrix(0, 0), matrix(0, 1) .. matrix(0, col - 1), 
matrix(1, 0) ...) this iterator support the copy, assignment, increment,
 equality/inequality and dereferencing operators. </p>
<dl class="section return"><dt>Returns</dt><dd>an iterator over all the matrix cells </dd></dl>

</div>
</div>
<a class="anchor" id="a4e3f1efb2eb450996fb7c7ed2a758ad9"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tbody><tr>
  <td class="mlabels-left">
      <table class="memname">
        <tbody><tr>
          <td class="memname">const_iterator&lt;vector&lt;T&gt; &gt; <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt;::colIteratorBegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </tbody></table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</tbody></table>
</div><div class="memdoc">

<p>colIteratorBegin return an iterator over all the matrix cols </p>
<dl class="section return"><dt>Returns</dt><dd>an iterator over all the matrix cols </dd></dl>

</div>
</div>
<a class="anchor" id="a743630b6170037d892aec448f4f36114"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tbody><tr>
  <td class="mlabels-left">
      <table class="memname">
        <tbody><tr>
          <td class="memname">const_iterator&lt;vector&lt;T&gt; &gt; <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt;::colIteratorEnd </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </tbody></table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</tbody></table>
</div><div class="memdoc">

<p>colIteratorEnd returns an iterator pointing to the past-the-end col in the matrix </p>
<dl class="section return"><dt>Returns</dt><dd>an iterator pointing to the past-the-end col in the matrix </dd></dl>

</div>
</div>
<a class="anchor" id="a744af9b5b1edc342fe569d9fa87d14a8"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tbody><tr>
  <td class="mlabels-left">
      <table class="memname">
        <tbody><tr>
          <td class="memname">T <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt;::det </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </tbody></table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</tbody></table>
</div><div class="memdoc">

<p>det calc the determinant of the matrix if can't calc the determinante (e,g: not square matrix) throws an exeption. </p>
<dl class="section return"><dt>Returns</dt><dd>the determinant of the matrix </dd></dl>

</div>
</div>
<a class="anchor" id="a78a70e06274ca998db6fe02923f98a3b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tbody><tr>
  <td class="mlabels-left">
      <table class="memname">
        <tbody><tr>
          <td class="memname">iterator <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</tbody></table>
</div><div class="memdoc">

<p>end returns an iterator pointing to the past-the-end cell in the matrix </p>
<dl class="section return"><dt>Returns</dt><dd>an iterator pointing to the past-the-end cell in the matrix </dd></dl>

</div>
</div>
<a class="anchor" id="acc433c474187bbca8f718dc77929c751"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tbody><tr>
  <td class="mlabels-left">
      <table class="memname">
        <tbody><tr>
          <td class="memname">unsigned int <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt;::getNumOfCols </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </tbody></table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</tbody></table>
</div><div class="memdoc">

<p>getNumOfCols get the number of columns in this matrix </p>
<dl class="section return"><dt>Returns</dt><dd>the number of columns in this matrix </dd></dl>

</div>
</div>
<a class="anchor" id="afe7af98b93477a46a6522c51bd6a7b6b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tbody><tr>
  <td class="mlabels-left">
      <table class="memname">
        <tbody><tr>
          <td class="memname">unsigned int <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt;::getNumOfRows </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </tbody></table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</tbody></table>
</div><div class="memdoc">

<p>getNumOfRows get the number of rows in this matrix </p>
<dl class="section return"><dt>Returns</dt><dd>the number of rows in this matrix </dd></dl>

</div>
</div>
<a class="anchor" id="ac52175b165a1e4b18317e67bd82aad12"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tbody><tr>
  <td class="mlabels-left">
      <table class="memname">
        <tbody><tr>
          <td class="memname"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a> <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt;::map </td>
          <td>(</td>
          <td class="paramtype">T(*)(const T)&nbsp;</td>
          <td class="paramname"><em>func</em></td><td>)</td>
          <td> const</td>
        </tr>
      </tbody></table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</tbody></table>
</div><div class="memdoc">

<p>map run function on every item of the matrix. returns a mtrix of item item result. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname">func</td><td>a function to run on all matrix items </td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a mtrix of item item result of function func </dd></dl>

</div>
</div>
<a class="anchor" id="affeca995038783bc2f712287cc06ddbd"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tbody><tr>
  <td class="mlabels-left">
      <table class="memname">
        <tbody><tr>
          <td class="memname">bool <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt;::operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </tbody></table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</tbody></table>
</div><div class="memdoc">

<p>operator != returns true iff two matrixes are different </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname">other</td><td>the other matrix to compare with this one </td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>returns true iff two matrixes are different </dd></dl>

</div>
</div>
<a class="anchor" id="a75e49f6179992a5f8da53a00f6f22f9c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tbody><tr>
  <td class="mlabels-left">
      <table class="memname">
        <tbody><tr>
          <td class="memname">T <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt;::operator() </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"><em>row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"><em>col</em>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </tbody></table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</tbody></table>
</div><div class="memdoc">

<p>operator () returns the value in the [row, col] cell of the matrix </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname">row</td><td>the row </td></tr>
    <tr><td class="paramname">col</td><td>the column </td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the value in the [row, col] cell of the matrix </dd></dl>

</div>
</div>
<a class="anchor" id="a774518be474088dcbc79b18918d62bc8"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tbody><tr>
  <td class="mlabels-left">
      <table class="memname">
        <tbody><tr>
          <td class="memname">T&amp; <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt;::operator() </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"><em>row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"><em>col</em>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </tbody></table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</tbody></table>
</div><div class="memdoc">

<p>operator () returns a reference to the value in the [row, col] cell of the matrix </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname">row</td><td>the row </td></tr>
    <tr><td class="paramname">col</td><td>the column </td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the value in the [row, col] cell of the matrix </dd></dl>

</div>
</div>
<a class="anchor" id="a1f93236703bb9d047aff5d13a925b0ee"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tbody><tr>
  <td class="mlabels-left">
      <table class="memname">
        <tbody><tr>
          <td class="memname"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a> <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt;::operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </tbody></table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</tbody></table>
</div><div class="memdoc">

<p>operator * returns dot product of matrixes each cell in the resulting
 matrix is the sum of multiplies any cell in the equivalent column in 
the cell of the equivalent row. (e,g: c = a * b =&gt; c_{i, j} = 
sum(a_{i, k} * b_{k, j}) for more information, see <a href="http://www.mathsisfun.com/algebra/matrix-multiplying.html">here </a>
 for more detailed explanation. if the matrixes can't be multiply (e,g: 
the number of columns in the left matrix is different than the number of
 rows in the right one) throws an exception. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname">other</td><td>the matrix to multiply by this matrix </td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>dot product of matrixes </dd></dl>

</div>
</div>
<a class="anchor" id="aae0690c40b2ed1e3d84abee7080a61dd"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tbody><tr>
  <td class="mlabels-left">
      <table class="memname">
        <tbody><tr>
          <td class="memname"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&amp; <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt;::operator*= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</tbody></table>
</div><div class="memdoc">

<p>operator *= dot product of matrixes </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname">other</td><td>the matrix to multiply by this matrix </td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>this as the dot product of matrixes </dd></dl>

</div>
</div>
<a class="anchor" id="a6f304efd2bdc90c8703a530e78925e76"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tbody><tr>
  <td class="mlabels-left">
      <table class="memname">
        <tbody><tr>
          <td class="memname"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a> <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt;::operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </tbody></table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</tbody></table>
</div><div class="memdoc">

<p>operator + returns val by val addition of matrixes </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname">other</td><td>the matrix to add to this matrix </td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>val by val addition of matrixes </dd></dl>

</div>
</div>
<a class="anchor" id="a7fef945bd494e4d6f03b0571112c54fa"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tbody><tr>
  <td class="mlabels-left">
      <table class="memname">
        <tbody><tr>
          <td class="memname"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&amp; <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt;::operator+= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</tbody></table>
</div><div class="memdoc">

<p>operator += val by val addition of matrixes </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname">other</td><td>the matrix to add to this matrix </td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>this as the addition result (matrix). </dd></dl>

</div>
</div>
<a class="anchor" id="a50a42b8e1b50227d324ac4429fd56166"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tbody><tr>
  <td class="mlabels-left">
      <table class="memname">
        <tbody><tr>
          <td class="memname"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a> <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt;::operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </tbody></table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</tbody></table>
</div><div class="memdoc">

<p>operator - returns val by val differnce of matrixes </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname">other</td><td>the matrix to subbstract from this matrix </td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>val by val differnce of matrixes </dd></dl>

</div>
</div>
<a class="anchor" id="aeb50807cd0f6ef2a80a532ed8a6dbbdc"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tbody><tr>
  <td class="mlabels-left">
      <table class="memname">
        <tbody><tr>
          <td class="memname"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&amp; <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt;::operator-= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</tbody></table>
</div><div class="memdoc">

<p>operator -= val by val differnce of matrixes </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname">other</td><td>the matrix to subbstract from this matrix </td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>this as the substruction result (matrix). </dd></dl>

</div>
</div>
<a class="anchor" id="adff859b91b301d836a31d5dd80cd9f2b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tbody><tr>
  <td class="mlabels-left">
      <table class="memname">
        <tbody><tr>
          <td class="memname"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&amp; <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</tbody></table>
</div><div class="memdoc">

<p>operator = do a deep copy of another matrix into this one </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname">other</td><td>the matrix to copy </td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>this, after copying other content. </dd></dl>

</div>
</div>
<a class="anchor" id="a3037a7d875b2bc98b63ddf590ccae990"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tbody><tr>
  <td class="mlabels-left">
      <table class="memname">
        <tbody><tr>
          <td class="memname">bool <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </tbody></table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</tbody></table>
</div><div class="memdoc">

<p>operator == returns true iff both matrixes are equal </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname">other</td><td>the other matrix to compare with this one </td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>returns true iff both matrixes are equal </dd></dl>

</div>
</div>
<a class="anchor" id="a13774dc507f82f1f66bb59b3b19e867f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tbody><tr>
  <td class="mlabels-left">
      <table class="memname">
        <tbody><tr>
          <td class="memname">const_iterator&lt;vector&lt;T&gt; &gt; <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt;::rowIteratorBegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </tbody></table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</tbody></table>
</div><div class="memdoc">

<p>end returns an iterator pointing to the past-the-end cell in the matrix </p>
<dl class="section return"><dt>Returns</dt><dd>an iterator pointing to 
the past-the-end cell in the matrix begin return an iterator over all 
the matrix cells, start from the first row (e,g: matrix(0, 0), matrix(0,
 1) .. matrix(0, col - 1), matrix(1, 0) ...) A const_iterator is an 
iterator that points to const content. </dd>
<dd>
an iterator pointing to the past-the-end cell in the matrix rowIteratorBegin return an iterator over all the matrix rows </dd>
<dd>
an iterator over all the matrix rows </dd></dl>

</div>
</div>
<a class="anchor" id="a378d43faa1671f8736c00175217c89bf"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tbody><tr>
  <td class="mlabels-left">
      <table class="memname">
        <tbody><tr>
          <td class="memname">const_iterator&lt;vector&lt;T&gt; &gt; <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt;::rowIteratorEnd </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </tbody></table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</tbody></table>
</div><div class="memdoc">

<p>rowIteratorEnd returns an iterator pointing to the past-the-end row in the matrix </p>
<dl class="section return"><dt>Returns</dt><dd>an iterator pointing to the past-the-end row in the matrix </dd></dl>

</div>
</div>
<a class="anchor" id="aa362491926118a61584490beff4dcf13"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tbody><tr>
  <td class="mlabels-left">
      <table class="memname">
        <tbody><tr>
          <td class="memname">T <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt;::trace </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </tbody></table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</tbody></table>
</div><div class="memdoc">

<p>trace calc the trace of the matrix the trace of a matrix is the sum 
of it's main diagonal, the diagonal from the upper left to the lower 
right. if can't calc trace (e,g: not square matrix) throws an exeption. </p>
<dl class="section return"><dt>Returns</dt><dd>the trace of the matrix </dd></dl>

</div>
</div>
<a class="anchor" id="a678c8d016f3c2b3eb01e6f383c69d84f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tbody><tr>
  <td class="mlabels-left">
      <table class="memname">
        <tbody><tr>
          <td class="memname"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a> <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt;::transpose </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </tbody></table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</tbody></table>
</div><div class="memdoc">

<p>transpose returns the transpose of the matrix. </p>
<dl class="section return"><dt>Returns</dt><dd>the transpose of the matrix. </dd></dl>

</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a class="anchor" id="a83280b78a1638e1b0ceefab404efd254"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tbody><tr>
  <td class="mlabels-left">
      <table class="memname">
        <tbody><tr>
          <td class="memname"><a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt;T&gt; operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</tbody></table>
</div><div class="memdoc">

<p>operator - returns val by val negatives of a matrix </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname">self</td><td>the matrix to negate </td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>val by val negatives of a matrix (as another matrix) </dd></dl>

</div>
</div>
<a class="anchor" id="ae6a2969ab041cf8350335f575f7e0b75"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tbody><tr>
  <td class="mlabels-left">
      <table class="memname">
        <tbody><tr>
          <td class="memname">ostream&amp; operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">ostream &amp;&nbsp;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="http://www.cs.huji.ac.il/%7Elabcpp/ex3/classMatrix.html">Matrix</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="paramname"><em>matrix</em>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </tbody></table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</tbody></table>
</div><div class="memdoc">

<p>operator &lt;&lt; print a matrix assume that type T has &lt;&lt; 
operator by itself. print each cell in the matrix, with a tab ('\t') 
between cells, and new line between columns (and at the end of the 
matrix) except for Matrix&lt;char&gt;, than this operator prints no 
spaces between cells, and a single space between columns. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname">out</td><td>the ostream object to output to. </td></tr>
    <tr><td class="paramname">matrix</td><td>the matrix to output. </td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>out, for latter proccesing </dd></dl>

</div>
</div>
<hr>The documentation for this class was generated from the following file:<ul>
<li>matrix.h</li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"><address class="footer"><small>
Generated on Thu Jan 22 2015 02:17:52 for c++ ex. 3 by &nbsp;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="c++%20ex.%203%20%20Matrix%28%20T%20%29%20Class%20Template%20Reference_files/doxygen.png" alt="doxygen">
</a> 1.8.7
</small></address>


</body></html>